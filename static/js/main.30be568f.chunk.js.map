{"version":3,"sources":["features/counter/actions.ts","features/counter/Counter.tsx","App.tsx","serviceWorker.ts","features/counter/reducers.ts","features/counter/epics.ts","features/index.ts","index.tsx","features/counter/Counter.module.css"],"names":["ModifyCounterAsync","createAsyncAction","InitAsync","Counter","dispatch","useDispatch","count","useSelector","state","counter","errorMessage","running","loading","successCount","cancelCount","failCount","failureCount","useEffect","request","useState","incrementAmount","setIncrementAmount","amount","parseInt","className","styles","row","error","button","aria-label","onClick","value","textbox","onChange","e","target","disabled","cancel","App","Boolean","window","location","hostname","match","reducers","createReducer","handleAction","success","action","payload","failure","message","combineEpics","action$","state$","pipe","filter","isActionOf","mergeMap","from","of","map","catchError","switchMap","defer","Promise","resolve","reject","setTimeout","Error","number","takeUntil","ofType","reducer","combineReducers","counterReducers","rootEpics","CounterEpics","epicMiddleware","createEpicMiddleware","store","configureStore","middleware","logger","devTools","process","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.30be568f.chunk.js","sourcesContent":["import { createAsyncAction } from 'typesafe-actions';\nexport const ModifyCounterAsync = createAsyncAction('COUNTER/MODIFY/INIT', 'COUNTER/MODIFY/INIT/SUCCESS', 'COUNTER/MODIFY/INIT/FAILURE', 'COUNTER/MODIFY/INIT/CANCEL')<number, number, Error, undefined>();\n\nexport const InitAsync = createAsyncAction('COUNTER/INIT', 'COUNTER/INIT/SUCCESS', 'COUNTER/INIT/FAILURE', 'COUNTER/INIT/CANCEL')<undefined, number, Error, undefined>();","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Counter.module.css';\nimport { RootState } from '..';\nimport { InitAsync, ModifyCounterAsync } from './actions';\n\nexport function Counter() {\n  const dispatch = useDispatch();\n  const count = useSelector<RootState, number>(state => state.counter.count);\n  const errorMessage = useSelector<RootState, string>(state => state.counter.errorMessage);\n  const running = useSelector<RootState, boolean>(state => state.counter.loading);\n  const successCount = useSelector<RootState, number>(state => state.counter.successCount);\n  const cancelCount = useSelector<RootState, number>(state => state.counter.cancelCount);\n  const failCount = useSelector<RootState, number>(state => state.counter.failureCount);\n\n  useEffect(() => {\n    dispatch(InitAsync.request());\n  }, [dispatch]);\n\n  const [incrementAmount, setIncrementAmount] = useState('2');\n  const amount = parseInt(incrementAmount, 10);\n\n  return (\n    <div>\n      <div className={styles.row}>\n        Trigger an Error if the value is larger than 10\n      </div>\n      <div className={styles.row}>\n        Current state: {running? \"running\": \"not running\"}\n      </div>\n      <div className={styles.error}>\n        {errorMessage}\n      </div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(ModifyCounterAsync.request(amount))}\n        >\n          +\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(ModifyCounterAsync.request(amount* -1))}\n        >\n          -\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={e => setIncrementAmount(e.target.value)}\n          disabled={running}\n        />\n      </div>\n      <div className={styles.row}>\n      <button\n          className={styles.button}\n          aria-label=\"cancel\"\n          onClick={() => dispatch(ModifyCounterAsync.cancel())}\n          disabled={!running}\n        > Cancel current request</button>\n      </div>\n      <div className={styles.row}>\n        Success: {successCount} | Cancel: {cancelCount} | Reject: {failCount}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Counter } from './features/counter/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Counter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createReducer } from \"typesafe-actions\";\nimport { CounterActions } from \".\";\nimport { CounterState } from \"./state\";\nimport { InitAsync, ModifyCounterAsync } from \"./actions\";\n\nconst initialState = {\n    errorMessage: \"\",\n    count: 0,\n    loading: false,\n    successCount: 0,\n    failureCount: 0,\n    cancelCount: 0\n};\n\nconst reducers = createReducer<CounterState, CounterActions>(initialState)\n    .handleAction(InitAsync.success, (state, action) => ({ ...state, count: action.payload, loading: false, errorMessage: \"\" }))\n    .handleAction(ModifyCounterAsync.request, (state, action) => ({ ...state, loading: true, errorMessage: \"\" }))\n    .handleAction(ModifyCounterAsync.success, (state, action) => ({ ...state, loading: false, errorMessage: \"\", count: state.count + action.payload, successCount: state.successCount + 1 }))\n    .handleAction(ModifyCounterAsync.failure, (state, action) => ({ ...state, loading: false, errorMessage: action.payload.message, failureCount: state.failureCount + 1 }))\n    .handleAction(ModifyCounterAsync.cancel, (state, action) => ({ ...state, loading: false, cancelCount: state.cancelCount + 1 }))\n\nexport default reducers;","import { Epic, combineEpics, ofType } from 'redux-observable';\nimport { isActionOf } from 'typesafe-actions';\nimport { InitAsync, ModifyCounterAsync } from './actions';\nimport { filter, map, mergeMap, catchError, switchMap, takeUntil } from 'rxjs/operators';\nimport { defer, from, of } from 'rxjs';\nimport { RootState, RootActions } from '..';\n\nconst modifyCounter = (count: number) => new Promise<number>((resolve, reject) => {\n    setTimeout(() => {\n        if (count > 10 || count < -10)\n            reject(new Error(`Invalid Number ${count}`))\n        resolve(count);\n    }, 500);\n});\n\nexport const initAsyncEpic: Epic<RootActions, RootActions, RootState> = (action$, state$) =>\n    action$.pipe(\n        filter(isActionOf(InitAsync.request)),\n        mergeMap(action =>\n            from(of(831)).pipe(\n                map(InitAsync.success),\n                catchError(error => of(InitAsync.failure(error as Error)))\n            )\n        )\n    );\n\nexport const ModifyCounterInitAsyncEpic: Epic<RootActions, RootActions, RootState> = (action$, state$) =>\n    action$.pipe(\n        filter(isActionOf(ModifyCounterAsync.request)),\n        switchMap(action => defer(() => modifyCounter(action.payload)).pipe(\n            map((number: number) => ModifyCounterAsync.success(number)),\n            takeUntil(action$.pipe(ofType(ModifyCounterAsync.cancel))),\n            catchError((error: Error) => of(ModifyCounterAsync.failure(error)))\n        ))\n    );\n\nexport default combineEpics(\n    initAsyncEpic,\n    ModifyCounterInitAsyncEpic\n);","import { combineReducers } from \"redux\";\nimport { createEpicMiddleware, combineEpics } from \"redux-observable\";\nimport counterReducers from \"./counter/reducers\";\nimport { CounterActions } from \"./counter\";\nimport CounterEpics from \"./counter/epics\"\nimport { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from \"react-redux\";\nimport logger from 'redux-logger';\n\nconst reducer = combineReducers({\n    counter: counterReducers\n});\n\nexport type RootState = ReturnType<typeof reducer>;\nexport type RootActions = CounterActions;\n\nconst rootEpics = combineEpics(\n    CounterEpics\n);\n\nconst epicMiddleware = createEpicMiddleware<RootActions, RootActions, RootState>();\nexport const store = configureStore({\n    reducer,\n    middleware: [ epicMiddleware, logger ],\n    devTools: process.env.NODE_ENV !== 'production',\n});\nepicMiddleware.run(rootEpics);\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './features';\nimport { Provider } from 'react-redux';\n\nReactDOM.render (\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__BJmGO\",\"error\":\"Counter_error__wBd5-\",\"value\":\"Counter_value__1PcaP\",\"button\":\"Counter_button__Gb99S\",\"textbox\":\"Counter_textbox__3lD6G\",\"asyncButton\":\"Counter_asyncButton__3nsc_ Counter_button__Gb99S\"};"],"sourceRoot":""}